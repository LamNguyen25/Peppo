{"ast":null,"code":"import http from \"./httpService\";\nimport jwtDecode from \"jwt-decode\";\nimport { apiUrl } from \"../config.json\";\nconst apiGetAccessCode = apiUrl + \"/login/createNewAccessCode\";\nconst apiValidateAccessCode = apiUrl + \"/login/ValidateAccessCode\";\nconst tokenKey = \"token\"; // key-value name\n// Get current user by decoding JWT in Local Storage\n\nexport function getCurrentUser() {\n  // Always try to catch this because invalid token make the app crash\n  // localStorage.getItem('token')    // get the token header\n  try {\n    const jwt = localStorage.getItem(tokenKey);\n    return jwtDecode(jwt).phoneNumber;\n  } catch (ex) {\n    return null;\n  }\n}\nexport async function getAccessCode(phoneNumber) {\n  const {\n    data: {\n      token: jwt\n    }\n  } = await http.post(apiGetAccessCode, {\n    phoneNumber\n  });\n  console.log(jwt);\n  localStorage.setItem(tokenKey, jwt);\n}\nexport async function validateAccessCode(phoneNumber, accessCode) {\n  const response = await http.post(apiValidateAccessCode, {\n    phoneNumber,\n    accessCode\n  });\n  return response;\n}\nexport function loginWithJwt(jwt) {\n  localStorage.setItem(tokenKey, jwt);\n}\nexport function logout() {\n  localStorage.removeItem(tokenKey);\n}\nexport default {\n  getAccessCode,\n  validateAccessCode,\n  getCurrentUser,\n  loginWithJwt,\n  logout\n};","map":{"version":3,"sources":["/Users/lamnguyen/Desktop/OAs/Skipli/peppo/client/src/Services/apiService.js"],"names":["http","jwtDecode","apiUrl","apiGetAccessCode","apiValidateAccessCode","tokenKey","getCurrentUser","jwt","localStorage","getItem","phoneNumber","ex","getAccessCode","data","token","post","console","log","setItem","validateAccessCode","accessCode","response","loginWithJwt","logout","removeItem"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,eAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,MAAMC,gBAAgB,GAAID,MAAM,GAAG,4BAAnC;AACA,MAAME,qBAAqB,GAAGF,MAAM,GAAG,2BAAvC;AACA,MAAMG,QAAQ,GAAI,OAAlB,C,CAA2B;AAE3B;;AACA,OAAO,SAASC,cAAT,GAA0B;AAC7B;AACA;AACA,MAAI;AACA,UAAMC,GAAG,GAAGC,YAAY,CAACC,OAAb,CAAqBJ,QAArB,CAAZ;AACA,WAAOJ,SAAS,CAACM,GAAD,CAAT,CAAeG,WAAtB;AACH,GAHD,CAGE,OAAOC,EAAP,EAAW;AACT,WAAO,IAAP;AACH;AACJ;AAED,OAAO,eAAeC,aAAf,CAA6BF,WAA7B,EAA0C;AAC7C,QAAM;AAACG,IAAAA,IAAI,EAAC;AAACC,MAAAA,KAAK,EAACP;AAAP;AAAN,MAAqB,MAAMP,IAAI,CAACe,IAAL,CAAUZ,gBAAV,EAA4B;AAAEO,IAAAA;AAAF,GAA5B,CAAjC;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYV,GAAZ;AACAC,EAAAA,YAAY,CAACU,OAAb,CAAqBb,QAArB,EAA+BE,GAA/B;AACH;AAED,OAAO,eAAeY,kBAAf,CAAkCT,WAAlC,EAA+CU,UAA/C,EAA2D;AAC9D,QAAMC,QAAQ,GAAG,MAAMrB,IAAI,CAACe,IAAL,CAAUX,qBAAV,EAAiC;AAACM,IAAAA,WAAD;AAAcU,IAAAA;AAAd,GAAjC,CAAvB;AACA,SAAOC,QAAP;AACH;AACD,OAAO,SAASC,YAAT,CAAsBf,GAAtB,EAA2B;AAC9BC,EAAAA,YAAY,CAACU,OAAb,CAAqBb,QAArB,EAA+BE,GAA/B;AACH;AAED,OAAO,SAASgB,MAAT,GAAkB;AACrBf,EAAAA,YAAY,CAACgB,UAAb,CAAwBnB,QAAxB;AACH;AAGD,eAAe;AACXO,EAAAA,aADW;AAEXO,EAAAA,kBAFW;AAGXb,EAAAA,cAHW;AAIXgB,EAAAA,YAJW;AAKXC,EAAAA;AALW,CAAf","sourcesContent":["import http from \"./httpService\";\nimport jwtDecode from \"jwt-decode\";\nimport { apiUrl } from \"../config.json\";\nconst apiGetAccessCode  = apiUrl + \"/login/createNewAccessCode\";\nconst apiValidateAccessCode = apiUrl + \"/login/ValidateAccessCode\";\nconst tokenKey  = \"token\"; // key-value name\n\n// Get current user by decoding JWT in Local Storage\nexport function getCurrentUser() {\n    // Always try to catch this because invalid token make the app crash\n    // localStorage.getItem('token')    // get the token header\n    try {\n        const jwt = localStorage.getItem(tokenKey);\n        return jwtDecode(jwt).phoneNumber;\n    } catch (ex) {\n        return null;\n    }\n}\n\nexport async function getAccessCode(phoneNumber) {\n    const {data:{token:jwt}} = await http.post(apiGetAccessCode, { phoneNumber });\n    console.log(jwt);\n    localStorage.setItem(tokenKey, jwt);\n}\n\nexport async function validateAccessCode(phoneNumber, accessCode) {\n    const response = await http.post(apiValidateAccessCode, {phoneNumber, accessCode});\n    return response;\n}\nexport function loginWithJwt(jwt) {\n    localStorage.setItem(tokenKey, jwt);\n}\n\nexport function logout() {\n    localStorage.removeItem(tokenKey);\n}\n\n\nexport default {\n    getAccessCode,\n    validateAccessCode,\n    getCurrentUser,\n    loginWithJwt,\n    logout,\n};\n\n"]},"metadata":{},"sourceType":"module"}