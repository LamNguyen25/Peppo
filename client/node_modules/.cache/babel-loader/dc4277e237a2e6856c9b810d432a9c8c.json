{"ast":null,"code":"import http from \"./httpService\";\nimport jwtDecode from \"jwt-decode\";\nimport { apiUrl } from \"../config.json\";\nconst apiGetAccessCode = apiUrl + \"/login/createNewAccessCode\";\nconst apiValidateAccessCode = apiUrl + \"/login/ValidateAccessCode\";\nconst tokenKey = \"token\"; // key-value name\n// Get current user by decoding JWT in Local Storage\n\nexport function getCurrentUser() {\n  // Always try to catch this because invalid token make the app crash\n  // localStorage.getItem('token')    // get the token header\n  try {\n    const jwt = localStorage.getItem(tokenKey);\n    return jwtDecode(jwt);\n  } catch (ex) {\n    return null;\n  }\n}\nexport async function getAccessCode(phoneNumber) {\n  const {\n    data: {\n      token: jwt\n    }\n  } = await http.post(apiGetAccessCode, {\n    phoneNumber\n  });\n  localStorage.setItem(tokenKey, jwt);\n} // export async function VerificationCode(accessCode) {\n//     console.log('im here sent')\n//     const {data:{token:jwt}} = await http.post(apiSendAccessCode, {accessCode});\n// }\n\nexport async function validateAccessCode(phoneNumber, accessCode) {\n  const response = await http.post(apiValidateAccessCode, {\n    phoneNumber,\n    accessCode\n  });\n  return response;\n}\nexport function loginWithJwt(jwt) {\n  localStorage.setItem(tokenKey, jwt);\n}\nexport default {\n  getAccessCode,\n  validateAccessCode,\n  getCurrentUser,\n  loginWithJwt\n};","map":{"version":3,"sources":["/Users/lamnguyen/Desktop/OAs/Skipli/peppo/client/src/Services/apiService.js"],"names":["http","jwtDecode","apiUrl","apiGetAccessCode","apiValidateAccessCode","tokenKey","getCurrentUser","jwt","localStorage","getItem","ex","getAccessCode","phoneNumber","data","token","post","setItem","validateAccessCode","accessCode","response","loginWithJwt"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,eAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,MAAMC,gBAAgB,GAAID,MAAM,GAAG,4BAAnC;AACA,MAAME,qBAAqB,GAAGF,MAAM,GAAG,2BAAvC;AACA,MAAMG,QAAQ,GAAI,OAAlB,C,CAA2B;AAE3B;;AACA,OAAO,SAASC,cAAT,GAA0B;AAC7B;AACA;AACA,MAAI;AACA,UAAMC,GAAG,GAAGC,YAAY,CAACC,OAAb,CAAqBJ,QAArB,CAAZ;AACA,WAAOJ,SAAS,CAACM,GAAD,CAAhB;AACH,GAHD,CAGE,OAAOG,EAAP,EAAW;AACT,WAAO,IAAP;AACH;AACJ;AAED,OAAO,eAAeC,aAAf,CAA6BC,WAA7B,EAA0C;AAC7C,QAAM;AAACC,IAAAA,IAAI,EAAC;AAACC,MAAAA,KAAK,EAACP;AAAP;AAAN,MAAqB,MAAMP,IAAI,CAACe,IAAL,CAAUZ,gBAAV,EAA4B;AAAES,IAAAA;AAAF,GAA5B,CAAjC;AACAJ,EAAAA,YAAY,CAACQ,OAAb,CAAqBX,QAArB,EAA+BE,GAA/B;AACH,C,CAED;AACA;AACA;AACA;;AAEA,OAAO,eAAeU,kBAAf,CAAkCL,WAAlC,EAA+CM,UAA/C,EAA2D;AAC9D,QAAMC,QAAQ,GAAG,MAAMnB,IAAI,CAACe,IAAL,CAAUX,qBAAV,EAAiC;AAACQ,IAAAA,WAAD;AAAcM,IAAAA;AAAd,GAAjC,CAAvB;AACA,SAAOC,QAAP;AACH;AACD,OAAO,SAASC,YAAT,CAAsBb,GAAtB,EAA2B;AAC9BC,EAAAA,YAAY,CAACQ,OAAb,CAAqBX,QAArB,EAA+BE,GAA/B;AACH;AAED,eAAe;AACXI,EAAAA,aADW;AAEXM,EAAAA,kBAFW;AAGXX,EAAAA,cAHW;AAIXc,EAAAA;AAJW,CAAf","sourcesContent":["import http from \"./httpService\";\nimport jwtDecode from \"jwt-decode\";\nimport { apiUrl } from \"../config.json\";\nconst apiGetAccessCode  = apiUrl + \"/login/createNewAccessCode\";\nconst apiValidateAccessCode = apiUrl + \"/login/ValidateAccessCode\";\nconst tokenKey  = \"token\"; // key-value name\n\n// Get current user by decoding JWT in Local Storage\nexport function getCurrentUser() {\n    // Always try to catch this because invalid token make the app crash\n    // localStorage.getItem('token')    // get the token header\n    try {\n        const jwt = localStorage.getItem(tokenKey);\n        return jwtDecode(jwt);\n    } catch (ex) {\n        return null;\n    }\n}\n\nexport async function getAccessCode(phoneNumber) {\n    const {data:{token:jwt}} = await http.post(apiGetAccessCode, { phoneNumber });\n    localStorage.setItem(tokenKey, jwt);\n}\n\n// export async function VerificationCode(accessCode) {\n//     console.log('im here sent')\n//     const {data:{token:jwt}} = await http.post(apiSendAccessCode, {accessCode});\n// }\n\nexport async function validateAccessCode(phoneNumber, accessCode) {\n    const response = await http.post(apiValidateAccessCode, {phoneNumber, accessCode});\n    return response;\n}\nexport function loginWithJwt(jwt) {\n    localStorage.setItem(tokenKey, jwt);\n}\n\nexport default {\n    getAccessCode,\n    validateAccessCode,\n    getCurrentUser,\n    loginWithJwt\n};\n\n"]},"metadata":{},"sourceType":"module"}